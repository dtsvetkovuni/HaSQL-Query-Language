let x = 34 in x + 17^C

take Names from Belejnici
remove Empty from Belejnici

select x1 x2 x3 x4 where exists z2 in exists z3 in exists z4 in A(x1 x2 x3 x4) and B(x1 z2 z3 z4)


select x1 x2 cont(afsfa) x3 const(145t435tryh)

x1!=const(e2rtrwee)


select x1 x2 where exists z in A (x1 z) and B (z x2);


show x1 z1 x1
from A(x1 x2) 
where x2!=empty & x3!=empty & z1=0;



show (x1,x2,x3,x4,x5)
where {
    R(x1,x2)
    R(x2,x3)
    R(x3,x4)
    R(x4,x5)
    x1=x5
};


conjunt R(x1 x2) R(x3 x4) R(x5 x6) R(x7 x8) = select x1 x2 x3 x4 x5
   where x1=x8
         x2=x3
         x4=x5
         x6=x7

do conjunt $A:2 $B:2 $C:2

where
get x1 x2 from A & x3 x4 from B

show a1,a2,a1 where A(a1) defin a2 = 0



||
&&
remove
take
from
=
<
>
(
)




--------------------error handling from 2.5.1----------------

data E a = Ok a | Failed String

thenE :: E a -> (a -> E b) -> E b
m `thenE` k = 
   case m of 
       Ok a -> k a
	 Failed e -> Failed e

returnE :: a -> E a
returnE a = Ok a

failE :: String -> E a
failE err = Failed err

catchE :: E a -> (String -> E a) -> E a
catchE m k = 
   case m of
      Ok a -> OK a
	Failed e -> k e

parseError :: [Token] -> a
parseError [] = error "Unknown Parse Error" 
parseError (t:ts) = error ("Parse error at line:column " ++ (tokenPosn t))
parseError tokens = failE "Parse error"